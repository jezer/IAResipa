import os
import json
import logging
import google.generativeai as genai
from dotenv import load_dotenv
from pathlib import Path
import datetime
import yaml

# Configuração de Logging
log_dir = "logs/creator"
os.makedirs(log_dir, exist_ok=True)
logging.basicConfig(
    filename=f"{log_dir}/creator_{datetime.datetime.now().strftime('%Y%m%d')}.log",
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Configuração do Gemini e Caminhos do Projeto
load_dotenv()
PROJECT_ROOT = Path(os.getenv("PROJECT_ROOT"))

GOOGLE_API_KEY = os.getenv('GEMINI_API_KEY')
if not GOOGLE_API_KEY:
    logging.error("A variável de ambiente GEMINI_API_KEY não foi encontrada.")
    raise ValueError("A variável de ambiente GEMINI_API_KEY não foi encontrada.")

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-pro')

BASE_AGENT_YAML_PATH = PROJECT_ROOT / "src" / "agente_roteador" / "agent.yaml"

def create_agent(request_data: dict):
    """
    Cria um novo agente e seus artefatos diretamente na pasta src/.
    """
    agent_name = request_data.get("Nome do Agente")
    objective = request_data.get("Objetivo")
    agent_type = request_data.get("Classificação", "specific").lower()
    context_instructions = request_data.get("Contexto/Instruções", "")

    if not all([agent_name, objective]):
        logging.error("Erro: Nome do Agente e Objetivo são campos obrigatórios.")
        print("Erro: Nome do Agente e Objetivo são campos obrigatórios.")
        return

    logging.info(f"Iniciando criação do agente: {agent_name} (Tipo: {agent_type})")

    new_agent_dir = PROJECT_ROOT / "src" / agent_name
    new_agent_dir.mkdir(parents=True, exist_ok=True)
    logging.info(f"Diretório do novo agente criado: {new_agent_dir}")

    base_agent_yaml = {}
    try:
        with open(BASE_AGENT_YAML_PATH, 'r', encoding='utf-8') as f:
            base_agent_yaml = yaml.safe_load(f)
        logging.info(f"Conteúdo base do agent.yaml lido de {BASE_AGENT_YAML_PATH}")
    except FileNotFoundError:
        logging.error(f"Erro: Arquivo base agent.yaml não encontrado em {BASE_AGENT_YAML_PATH}")
        print(f"Erro: Arquivo base agent.yaml não encontrado em {BASE_AGENT_YAML_PATH}")
        return
    except yaml.YAMLError as e:
        logging.error(f"Erro ao parsear YAML do arquivo base {BASE_AGENT_YAML_PATH}: {e}")
        print(f"Erro ao parsear YAML do arquivo base {BASE_AGENT_YAML_PATH}: {e}")
        return

    logging.info("Gerando conteúdo para agent.yaml com Gemini...")
    agent_yaml_gemini_prompt = f'''
    Com base no objetivo e contexto fornecidos, gere o conteúdo para as seções 'scope' (in_scope e out_of_scope), 'inputs', 'outputs' e 'constraints' de um arquivo agent.yaml.
    O objetivo do agente é: {objective}
    Contexto adicional: {context_instructions}

    Responda em formato JSON com a seguinte estrutura:
    {{
        "scope": {{
            "in_scope": [],
            "out_of_scope": []
        }},
        "inputs": [
            {{"type": "", "description": ""}}
        ],
        "outputs": [
            {{"type": "", "description": ""}}
        ],
        "constraints": []
    }}
    '''
    
    agent_yaml_details = {}
    try:
        response = model.generate_content(agent_yaml_gemini_prompt)
        agent_yaml_details = json.loads(response.text)
        logging.info("Conteúdo do agent.yaml gerado com sucesso pelo Gemini.")
    except Exception as e:
        logging.error(f"Erro ao gerar conteúdo do agent.yaml com Gemini: {e}")
        print(f"Aviso: Erro ao gerar conteúdo do agent.yaml com Gemini. Usando placeholders.")
        agent_yaml_details = {
            "scope": {"in_scope": [objective], "out_of_scope": ["(Definir escopo fora)"]},
            "inputs": [{"type": "(Definir tipo de entrada)", "description": "(Definir descrição da entrada)"}],
            "outputs": [{"type": "(Definir tipo de saída)", "description": "(Definir descrição da saída)"}],
            "constraints": ["(Definir restrições)"]
        }

    base_agent_yaml['name'] = agent_name
    base_agent_yaml['type'] = agent_type
    base_agent_yaml['owner'] = "Generated by agente_creator"
    base_agent_yaml['version'] = "1.0.0"
    base_agent_yaml['dependencies'] = []

    base_agent_yaml['scope'] = agent_yaml_details.get('scope', {})
    base_agent_yaml['inputs'] = agent_yaml_details.get('inputs', [])
    base_agent_yaml['outputs'] = agent_yaml_details.get('outputs', [])
    base_agent_yaml['constraints'] = agent_yaml_details.get('constraints', [])

    logging.info("Gerando conteúdo para prompt.md com Gemini...")
    prompt_md_gemini_prompt = f'''
    Com base no objetivo e contexto fornecidos, gere o conteúdo para as seções 'Tarefas principais', 'Fora do escopo (REJEITAR)' e 'Estilo de resposta' de um arquivo prompt.md para um agente.
    O objetivo do agente é: {objective}
    Contexto adicional: {context_instructions}

    Responda em formato JSON com a seguinte estrutura:
    {{
        "tarefas_principais": [],
        "fora_do_escopo": [],
        "estilo_de_resposta": ""
    }}
    '''

    prompt_md_details = {}
    try:
        response = model.generate_content(prompt_md_gemini_prompt)
        prompt_md_details = json.loads(response.text)
        logging.info("Conteúdo do prompt.md gerado com sucesso pelo Gemini.")
    except Exception as e:
        logging.error(f"Erro ao gerar conteúdo do prompt.md com Gemini: {e}")
        print(f"Aviso: Erro ao gerar conteúdo do prompt.md com Gemini. Usando placeholders.")
        prompt_md_details = {
            "tarefas_principais": ["(Definir tarefas principais)"],
            "fora_do_escopo": ["(Definir o que está fora do escopo)"],
            "estilo_de_resposta": "(Definir estilo de resposta)"
        }

    prompt_md_content = f'''
# Nome
[{agent_name}]

# Objetivo (uma frase)
{objective}

# Contexto/Instruções
{context_instructions}

# Tarefas principais
{json.dumps(prompt_md_details.get('tarefas_principais', []), indent=4).replace('[', '1.  ').replace(']', '').replace('"', '')}

# Fora do escopo (REJEITAR)
{json.dumps(prompt_md_details.get('fora_do_escopo', []), indent=4).replace('[', '-   ').replace(']', '').replace('"', '')}

# Estilo de resposta
{prompt_md_details.get('estilo_de_resposta', '')}
'''

    try:
        agent_yaml_path = new_agent_dir / "agent.yaml"
        agent_yaml_path.write_text(yaml.safe_dump(base_agent_yaml, sort_keys=False, default_flow_style=False), encoding="utf-8")
        logging.info(f"Arquivo agent.yaml criado em {agent_yaml_path}")
        print(f"Arquivo agent.yaml criado em {agent_yaml_path}")

        prompt_md_path = new_agent_dir / "prompt.md"
        prompt_md_path.write_text(prompt_md_content, encoding="utf-8")
        logging.info(f"Arquivo prompt.md criado em {prompt_md_path}")
        print(f"Arquivo prompt.md criado em {prompt_md_path}")

    except Exception as e:
        logging.error(f"Erro ao escrever arquivos do agente: {e}")
        print(f"Erro ao escrever arquivos do agente: {e}")
        return

    logging.info(f"Agente '{agent_name}' criado com sucesso em {new_agent_dir}")
    print(f"Agente '{agent_name}' criado com sucesso em {new_agent_dir}")

if __name__ == "__main__":
    request_data = {
        "Nome do Agente": "agente_plano_testes",
        "Classificação": "specific",
        "Objetivo": "Gerar planos de teste detalhados, cenários Gherkin, casos de teste e scripts de setup/teardown com base em requisitos.",
        "Contexto/Instruções": "O agente deve processar requisitos e gerar artefatos de teste seguindo os formatos definidos em `teste.md`. Deve produzir: planos de teste, cenários Gherkin, casos de teste, scripts de dados, checklists de risco e planos de regressão."
    }
    create_agent(request_data)