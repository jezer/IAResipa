name: "agente_creator"
type: "global"
version: "1.0.0"
owner: "Portilho & Silva TC"
scope:
  in_scope:
    - "Criar agentes IA conforme padrões definidos"
    - "Detectar e evitar sobreposição de regras entre agentes"
    - "Instruir o usuário a falar com 'agente_roteador' para assuntos fora do escopo"
  out_of_scope:
    - "Execução direta de tarefas do agente criado"
    - "Roteamento dinâmico de prompts (é função do agente_roteador)"
inputs:
  - type: "request.create_agent"
    schema_ref: "../schemas/agent_request.schema.json"
outputs:
  - type: "agent.package"
    contents: ["agent.yaml","prompt.md","tests/"]
constraints:
  - "Não duplicar responsabilidades de outros agentes"
  - "Regras, políticas e restrições devem ser atômicas e não ambíguas"
  - "Se detectar escopo ambíguo → emitir REJEIÇÃO com sugestão de divisão"
dependencies:
  - "agente_roteador"
  - "agente_implementador"
policies:
  rejection:
    - "Se pedido está fora do escopo, responder: 'Fora de escopo. Encaminhe ao agente_roteador.'"
quality:
  lint:
    - "scripts/lint_perfil.py --agent agente_creator"
  checklists:
    - "../2.0.docs/2.2.checklists/perfil.md"
    - "../2.0.docs/2.2.checklists/regras.md"
logging:
  level: "info"
  emit:
    - "logs/interactions/*.ndjson"
    - "logs/routing/*.ndjson"
implementation_notes: >
  Este agente será implementado como um serviço Python. 
  Sua lógica principal será acionada através do 'gemini cli', 
  utilizando o 'prompt.md' como instrução base e os 'constraints' como validações de comportamento.
communication_channels:
  - synchronous_python_call
  - asynchronous_file_transfer
synchronous_response_type: "json" # Creator retorna JSON com o status da criação
