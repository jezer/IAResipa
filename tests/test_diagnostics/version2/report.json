{"created": 1752720674.3707635, "duration": 1.8588783740997314, "exitcode": 1, "root": "C:\\source\\IAResipa", "environment": {}, "summary": {"passed": 6, "failed": 4, "total": 10, "collected": 10}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_py_main_processor.py", "type": "Module"}]}, {"nodeid": "tests/unit/test_py_main_processor.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_ola", "type": "Function", "lineno": 13}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_reservar", "type": "Function", "lineno": 25}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_pix", "type": "Function", "lineno": 37}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_status_pix", "type": "Function", "lineno": 49}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_cancelar", "type": "Function", "lineno": 61}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_gerenciar_reservas", "type": "Function", "lineno": 73}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_cadastrar", "type": "Function", "lineno": 85}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_gemini_fallback", "type": "Function", "lineno": 97}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_no_from_number", "type": "Function", "lineno": 109}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_body_and_text_handling", "type": "Function", "lineno": 133}]}], "tests": [{"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_ola", "lineno": 13, "outcome": "passed", "keywords": ["test_process_message_ola", "test_py_main_processor.py", "unit", "tests", "IAResipa", ""], "setup": {"duration": 0.0008402999956160784, "outcome": "passed"}, "call": {"duration": 0.0009080000454559922, "outcome": "passed"}, "teardown": {"duration": 0.0002695999573916197, "outcome": "passed"}}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_reservar", "lineno": 25, "outcome": "failed", "keywords": ["test_process_message_reservar", "test_py_main_processor.py", "unit", "tests", "IAResipa", ""], "setup": {"duration": 0.0003217000048607588, "outcome": "passed"}, "call": {"duration": 0.0013898999895900488, "outcome": "failed", "crash": {"path": "C:\\source\\IAResipa\\tests\\unit\\test_py_main_processor.py", "lineno": 35, "message": "AssertionError: Expected 'handle_reservation' to be called once. Called 0 times."}, "traceback": [{"path": "tests\\unit\\test_py_main_processor.py", "lineno": 35, "message": "AssertionError"}], "longrepr": "self = <MagicMock name='handle_reservation' id='2981653248192'>\nargs = ({'body': 'quero reservar', 'from': '123456789', 'text': 'quero reservar'},)\nkwargs = {}\nmsg = \"Expected 'handle_reservation' to be called once. Called 0 times.\"\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'handle_reservation' to be called once. Called 0 times.\n\nC:\\Program Files\\Python313\\Lib\\unittest\\mock.py:990: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nmocker = <pytest_mock.plugin.MockerFixture object at 0x000002B638745090>\nmock_message_details = {'body': 'quero reservar', 'from': '123456789', 'text': 'quero reservar'}\n\n    def test_process_message_reservar(mocker, mock_message_details):\n        mock_handle_reservation = mocker.patch('resipaia.codbackup.py_main_processor.handle_reservation', return_value={\"to\": \"123456789\", \"message\": \"Processando sua solicita\u00e7\u00e3o de reserva.\"})\n    \n        message_details = mock_message_details\n        message_details[\"body\"] = \"quero reservar\"\n        message_details[\"text\"] = \"quero reservar\"\n    \n        response = process_message(message_details)\n    \n>       mock_handle_reservation.assert_called_once_with({\"from\": \"123456789\", \"body\": \"quero reservar\", \"text\": \"quero reservar\"})\nE       AssertionError: Expected 'handle_reservation' to be called once. Called 0 times.\n\ntests\\unit\\test_py_main_processor.py:35: AssertionError"}, "teardown": {"duration": 0.0004608000162988901, "outcome": "passed"}}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_pix", "lineno": 37, "outcome": "failed", "keywords": ["test_process_message_pix", "test_py_main_processor.py", "unit", "tests", "IAResipa", ""], "setup": {"duration": 0.0003575999289751053, "outcome": "passed"}, "call": {"duration": 0.0006220999639481306, "outcome": "failed", "crash": {"path": "C:\\source\\IAResipa\\tests\\unit\\test_py_main_processor.py", "lineno": 47, "message": "AssertionError: Expected 'handle_pix_initiation' to be called once. Called 0 times."}, "traceback": [{"path": "tests\\unit\\test_py_main_processor.py", "lineno": 47, "message": "AssertionError"}], "longrepr": "self = <MagicMock name='handle_pix_initiation' id='2981653249200'>\nargs = ({'body': 'fazer pix', 'from': '123456789', 'text': 'fazer pix'},)\nkwargs = {}\nmsg = \"Expected 'handle_pix_initiation' to be called once. Called 0 times.\"\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'handle_pix_initiation' to be called once. Called 0 times.\n\nC:\\Program Files\\Python313\\Lib\\unittest\\mock.py:990: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nmocker = <pytest_mock.plugin.MockerFixture object at 0x000002B638745810>\nmock_message_details = {'body': 'fazer pix', 'from': '123456789', 'text': 'fazer pix'}\n\n    def test_process_message_pix(mocker, mock_message_details):\n        mock_handle_pix_initiation = mocker.patch('resipaia.codbackup.py_main_processor.handle_pix_initiation', return_value={\"to\": \"123456789\", \"message\": \"Iniciando processo Pix.\"})\n    \n        message_details = mock_message_details\n        message_details[\"body\"] = \"fazer pix\"\n        message_details[\"text\"] = \"fazer pix\"\n    \n        response = process_message(message_details)\n    \n>       mock_handle_pix_initiation.assert_called_once_with({\"from\": \"123456789\", \"body\": \"fazer pix\", \"text\": \"fazer pix\"})\nE       AssertionError: Expected 'handle_pix_initiation' to be called once. Called 0 times.\n\ntests\\unit\\test_py_main_processor.py:47: AssertionError"}, "teardown": {"duration": 0.0004029000410810113, "outcome": "passed"}}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_status_pix", "lineno": 49, "outcome": "passed", "keywords": ["test_process_message_status_pix", "test_py_main_processor.py", "unit", "tests", "IAResipa", ""], "setup": {"duration": 0.00038029998540878296, "outcome": "passed"}, "call": {"duration": 0.0006548999808728695, "outcome": "passed"}, "teardown": {"duration": 0.0002948000328615308, "outcome": "passed"}}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_cancelar", "lineno": 61, "outcome": "failed", "keywords": ["test_process_message_cancelar", "test_py_main_processor.py", "unit", "tests", "IAResipa", ""], "setup": {"duration": 0.00039409997407346964, "outcome": "passed"}, "call": {"duration": 0.0007964000105857849, "outcome": "failed", "crash": {"path": "C:\\source\\IAResipa\\tests\\unit\\test_py_main_processor.py", "lineno": 71, "message": "AssertionError: Expected 'handle_cancellation' to be called once. Called 0 times."}, "traceback": [{"path": "tests\\unit\\test_py_main_processor.py", "lineno": 71, "message": "AssertionError"}], "longrepr": "self = <MagicMock name='handle_cancellation' id='2981657331088'>\nargs = ({'body': 'cancelar reserva', 'from': '123456789', 'text': 'cancelar reserva'},)\nkwargs = {}\nmsg = \"Expected 'handle_cancellation' to be called once. Called 0 times.\"\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'handle_cancellation' to be called once. Called 0 times.\n\nC:\\Program Files\\Python313\\Lib\\unittest\\mock.py:990: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nmocker = <pytest_mock.plugin.MockerFixture object at 0x000002B636B73100>\nmock_message_details = {'body': 'cancelar reserva', 'from': '123456789', 'text': 'cancelar reserva'}\n\n    def test_process_message_cancelar(mocker, mock_message_details):\n        mock_handle_cancellation = mocker.patch('resipaia.codbackup.py_main_processor.handle_cancellation', return_value={\"to\": \"123456789\", \"message\": \"Processando seu cancelamento.\"})\n    \n        message_details = mock_message_details\n        message_details[\"body\"] = \"cancelar reserva\"\n        message_details[\"text\"] = \"cancelar reserva\"\n    \n        response = process_message(message_details)\n    \n>       mock_handle_cancellation.assert_called_once_with({\"from\": \"123456789\", \"body\": \"cancelar reserva\", \"text\": \"cancelar reserva\"})\nE       AssertionError: Expected 'handle_cancellation' to be called once. Called 0 times.\n\ntests\\unit\\test_py_main_processor.py:71: AssertionError"}, "teardown": {"duration": 0.0007033000001683831, "outcome": "passed"}}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_gerenciar_reservas", "lineno": 73, "outcome": "passed", "keywords": ["test_process_message_gerenciar_reservas", "test_py_main_processor.py", "unit", "tests", "IAResipa", ""], "setup": {"duration": 0.0008562000002712011, "outcome": "passed"}, "call": {"duration": 0.0009246000554412603, "outcome": "passed"}, "teardown": {"duration": 0.0004347999347373843, "outcome": "passed"}}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_cadastrar", "lineno": 85, "outcome": "passed", "keywords": ["test_process_message_cadastrar", "test_py_main_processor.py", "unit", "tests", "IAResipa", ""], "setup": {"duration": 0.0005007999716326594, "outcome": "passed"}, "call": {"duration": 0.0005558000411838293, "outcome": "passed"}, "teardown": {"duration": 0.00022109993733465672, "outcome": "passed"}}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_gemini_fallback", "lineno": 97, "outcome": "passed", "keywords": ["test_process_message_gemini_fallback", "test_py_main_processor.py", "unit", "tests", "IAResipa", ""], "setup": {"duration": 0.0002703999634832144, "outcome": "passed"}, "call": {"duration": 0.00047200010158121586, "outcome": "passed"}, "teardown": {"duration": 0.00020999996922910213, "outcome": "passed"}}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_no_from_number", "lineno": 109, "outcome": "passed", "keywords": ["test_process_message_no_from_number", "test_py_main_processor.py", "unit", "tests", "IAResipa", ""], "setup": {"duration": 0.0002711999695748091, "outcome": "passed"}, "call": {"duration": 0.0013461000053212047, "outcome": "passed"}, "teardown": {"duration": 0.0002452000044286251, "outcome": "passed"}}, {"nodeid": "tests/unit/test_py_main_processor.py::test_process_message_body_and_text_handling", "lineno": 133, "outcome": "failed", "keywords": ["test_process_message_body_and_text_handling", "test_py_main_processor.py", "unit", "tests", "IAResipa", ""], "setup": {"duration": 0.00037160003557801247, "outcome": "passed"}, "call": {"duration": 0.0011615999974310398, "outcome": "failed", "crash": {"path": "C:\\source\\IAResipa\\tests\\unit\\test_py_main_processor.py", "lineno": 154, "message": "AssertionError: Expected 'handle_gemini_query' to be called once. Called 0 times."}, "traceback": [{"path": "tests\\unit\\test_py_main_processor.py", "lineno": 154, "message": "AssertionError"}], "longrepr": "self = <MagicMock name='handle_gemini_query' id='2981657337136'>\nargs = ({'body': '', 'from': '123456789', 'text': ''},), kwargs = {}\nmsg = \"Expected 'handle_gemini_query' to be called once. Called 0 times.\"\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'handle_gemini_query' to be called once. Called 0 times.\n\nC:\\Program Files\\Python313\\Lib\\unittest\\mock.py:990: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nmocker = <pytest_mock.plugin.MockerFixture object at 0x000002B638870550>\nmock_message_details = {'body': 'Ol\u00e1', 'from': '123456789@c.us', 'text': 'Ol\u00e1'}\n\n    def test_process_message_body_and_text_handling(mocker, mock_message_details):\n        mock_handle_user_check = mocker.patch('resipaia.codbackup.py_main_processor.handle_user_check', return_value={\"to\": \"123456789\", \"message\": \"Verifica\u00e7\u00e3o de usu\u00e1rio em andamento.\"})\n    \n        message_details = {\"from\": \"123456789@c.us\", \"body\": \"\", \"text\": \"ol\u00e1\"}\n        response = process_message(message_details)\n        assert message_details[\"body\"] == \"ol\u00e1\"\n        assert message_details[\"text\"] == \"ol\u00e1\"\n        mock_handle_user_check.assert_called_once_with({\"from\": \"123456789\", \"body\": \"ol\u00e1\", \"text\": \"ol\u00e1\"})\n    \n        message_details = {\"from\": \"123456789@c.us\", \"body\": \"oi\", \"text\": \"\"}\n        response = process_message(message_details)\n        assert message_details[\"body\"] == \"oi\"\n        assert message_details[\"text\"] == \"oi\"\n        mock_handle_user_check.assert_called_with({\"from\": \"123456789\", \"body\": \"oi\", \"text\": \"oi\"})\n    \n        message_details = {\"from\": \"123456789@c.us\", \"body\": \"\", \"text\": \"\"}\n        response = process_message(message_details)\n        assert message_details[\"body\"] == \"\"\n        assert message_details[\"text\"] == \"\"\n        mock_handle_gemini_query = mocker.patch('resipaia.codbackup.py_main_processor.handle_gemini_query')\n>       mock_handle_gemini_query.assert_called_once_with({\"from\": \"123456789\", \"body\": \"\", \"text\": \"\"})\nE       AssertionError: Expected 'handle_gemini_query' to be called once. Called 0 times.\n\ntests\\unit\\test_py_main_processor.py:154: AssertionError"}, "teardown": {"duration": 0.00047450000420212746, "outcome": "passed"}}]}